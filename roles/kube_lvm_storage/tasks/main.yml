- name: 'Assert all vgs have a host_path and volumes defined'
  assert:
    that:
      - item.value.volumes|length > 0
      - item.value.host_path|default("") != ""
  with_dict: '{{ metal_k8s_storage_class.lvm_conf.vgs }}'

- name: 'create dir for lvm storage'
  file:
    dest: '{{ item.value.host_path }}'
    state: directory
  with_dict: '{{ metal_k8s_storage_class.lvm_conf.vgs }}'

- name: display vgs in metal_k8s_storage_class
  debug:
    msg: '{{ metal_k8s_storage_class.lvm_conf.vgs }}'
  when: debug|bool

#
# Set a dictionary that will be used for the LVM configuration
# based on the metal_k8s_storage_class var
#
#   ..code::
#
#     {
#         '/dev/mapper/kubevg-lv01' : {
#             'host_path': '/mnt/kubevg',
#             'vg': 'kubevg',
#             'volume': {
#                 'name': 'lv01',
#                 'fstype': 'ext4',
#                 'size': '10G',
#                 'fs_force': False,
#                 'fs_opts': "",
#                 'mount_opts': "",
#             },
#         }
#     }
#

- name: set fact with metal_k8s_storage_class attributes
  set_fact:
    metal_k8s_lvm_conf: >-
      {
        {%- for vg, prop in metal_k8s_storage_class.lvm_conf.vgs.items() -%}
          {%- set host_path = prop.host_path -%}
          {%- for volume_name, volume in prop.volumes.items() -%}
            {%- set _ = volume.update(
              {'fstype': volume.fstype
                |default(metal_k8s_storage_class.lvm_conf.default_fstype)}) -%}
            {%- set _ = volume.update(
              {'fs_force': volume.fs_force
                |default(
                  metal_k8s_storage_class.lvm_conf.default_fs_force
                )}) -%}
            {%- set _ = volume.update(
              {'fs_opts': volume.fs_opts
                |default(
                    metal_k8s_storage_class.lvm_conf.default_fs_opts)}) -%}
            {%- set _ = volume.update(
              {'mount_opts': volume.mount_opts
                |default(
                  metal_k8s_storage_class.lvm_conf.default_mount_opts)}) -%}
            {%- set device = '/dev/mapper/' ~ vg ~ '-'
              ~ volume_name.replace("-", "--") -%}
            '{{ device }}': {{ dict(vg=vg,
                volume=volume,
                volume_name=volume_name,
                host_path=prop.host_path,
                storage_class=prop.storage_class,)
             }},
          {%- endfor -%}
        {%- endfor -%}
      }

- name: display metal_k8s_lvm_conf dictionary
  debug:
    msg: '{{ metal_k8s_lvm_conf }}'
  when: debug|bool

- name: 'create lvm volumes with required size for each vg'
  lvol:
    lv: '{{ item.value.volume_name }}'
    vg: '{{ item.value.vg }}'
    size: '{{ item.value.volume.size }}'
    state: present
    shrink: False
  with_dict: '{{ metal_k8s_lvm_conf }}'

- name: 'create filesystem on each lvm volumes'
  filesystem:
    fstype: '{{ item.value.volume.fstype }}'
    dev: '{{ item.key }}'
    opts: '{{ item.value.volume.fs_opts }}'
    force: '{{ item.value.volume.fs_force }}'
  with_dict: '{{ metal_k8s_lvm_conf }}'

- name: 'get UUIDs of lvm volumes'
  command: blkid -s UUID -o value {{ item.key }}
  check_mode: False
  changed_when: False
  register: metal_k8s_lvm_uuids
  with_dict: '{{ metal_k8s_lvm_conf }}'

- name: display UUIDs
  debug:
    msg: '{{ metal_k8s_lvm_uuids.results }}'
  when: debug|bool

# Update metal_k8s_conf with UUIDs of the filesystems
#
#   ..code::
#
#     {
#         '/dev/mapper/kubevg-lv01' : {
#             'host_path': '/mnt/kubevg',
#             'vg': 'kubevg',
#             'volume': {
#                 'name': 'lv01',
#                 'fstype': 'ext4',
#                 'size': '10G',
#                 'uuid': 'xxxx-yyyy'
#             },
#         }
#     }

- name: update fact metal_k8s_lvm_conf with UUIDs
  set_fact:
    metal_k8s_lvm_conf: >-
      {%- for result in metal_k8s_lvm_uuids.results|default([]) -%}
         {%- set _ =  metal_k8s_lvm_conf[result.item.key].volume.update({'uuid': result.stdout}) -%}
      {%- endfor -%}
      {{ metal_k8s_lvm_conf }}

- name: display metal_k8s_lvm_conf dictionary with UUIDs
  debug:
    msg: '{{ metal_k8s_lvm_conf }}'
  when: debug|bool

- name: 'mount filesystem for each lvm volumes'
  mount:
    path: '{{ item.value.host_path }}/{{ item.value.volume.uuid }}'
    src: UUID={{ item.value.volume.uuid }}
    opts: '{{ item.value.volume.mount_opts }}'
    fstype: '{{ item.value.volume.fstype }}'
    state: mounted
  with_dict: '{{ metal_k8s_lvm_conf }}'

- name: 'Assert each LVM Vgs has a StorageClass name'
  assert:
    that:
      - 'item.value.storage_class'
  with_dict: '{{ metal_k8s_storage_class.lvm_conf.vgs }}'

- name: 'Create the Kubernetes resources | StorageClass'
  k8s_raw:
    state: present
    kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
    definition:
      apiVersion: v1
      kind: StorageClass
      metadata:
        name: '{{ item.key }}'
        annotations:
          storageclass.kubernetes.io/is-default-class: '{{ item.value.is_default|default(False)|string }}'
      provisioner: kubernetes.io/no-provisioner
      volumeBindingMode: WaitForFirstConsumer
  delegate_to: localhost
  run_once: True
  with_dict: '{{ metal_k8s_storage_class.storage_classes }}'

- name: 'Create the Kubernetes resources | PVs'
  k8s_raw:
    state: present
    kubeconfig: "{{ lookup('env', 'KUBECONFIG') }}"
    definition:
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: >-
          {{ item.value.vg|replace("_","-") }}-{{ item.value.volume.uuid }}
        annotations:
          "volume.alpha.kubernetes.io/node-affinity": ' {
              "requiredDuringSchedulingIgnoredDuringExecution": {
                  "nodeSelectorTerms": [
                      { "matchExpressions": [
                          { "key": "kubernetes.io/hostname",
                            "operator": "In",
                            "values": ["{{ ansible_hostname }}"]
                          }
                      ]}
                   ]}
                }'
      spec:
        capacity:
          storage: '{{ item.value.volume.size }}'
        accessModes:
        - ReadWriteOnce
        persistentVolumeReclaimPolicy: Delete
        storageClassName: '{{ item.value.storage_class }}'
        local:
          path: '{{ item.value.host_path }}/{{ item.value.volume.uuid }}'
  delegate_to: localhost
  with_dict: '{{ metal_k8s_lvm_conf }}'
