---
# Work-around https://github.com/ansible/ansible/issues/38149
- name: Ensure password hashing works properly
  assert:
    that: ('test'|bcrypt_blowfish(ident='2y', seed=inventory_hostname)|length) > 0
    msg: The Ansible 'password_hash' filter on your system is buggy, please upgrade.
  tags: ['assert']

- name: Create MetalK8s repository configuration directories
  file:
    path: '{{ item }}'
    mode: '0755'
    owner: root
    group: root
    state: directory
  become: true
  with_items:
    - '{{ repository__config }}'

- name: Create MetalK8s offline repository storage directories
  file:
    path: '{{ item }}'
    mode: '0755'
    owner: root
    group: root
    state: directory
  become: true
  with_items:
    - '{{ repository__data }}'
    - '{{ repository__data }}/www-data'

- name: Create MetalK8s offline repository empty index.html
  copy:
    dest: '{{ repository__data }}/www-data/index.html'
    mode: '0644'
    owner: root
    group: root
    # Yes, this is valid HTML5
    content: '<!DOCTYPE html><title>MetalK8s repository</title>'
  become: true

- name: Create MetalK8s offline Docker repository storage directories
  file:
    path: '{{ item }}'
    mode: '0755'
    # Keep in sync with `runAsUser` and `fsGroup` in the Pod manifest
    owner: 1000
    group: 1000
    state: directory
  become: true
  with_items:
    - '{{ repository__data }}/registry'

- name: Retrieve existing Docker repository password
  import_tasks: read-docker-password.yml

- name: Generate Docker repository credentials
  block:
    - name: Generate random password
      command: openssl rand -hex 16
      changed_when: true
      check_mode: no
      register: openssl_rand
      no_log: true
    - name: Set new Docker repository credentials facts
      set_fact:
        repository__docker_creds_user: 'admin'
        repository__docker_creds_password: '{{ openssl_rand.stdout }}'
        repository__docker_login: true
      no_log: true
  when: repository__docker_login is not defined

- name: Copy MetalK8s repository configuration templates
  template:
    dest: '{{ repository__config }}/{{ item }}'
    mode: '0644'
    owner: root
    group: root
    src: 'etc/metalk8s/repository/{{ item }}.j2'
  become: true
  with_items:
    - nginx.conf
    - registry.yml
    - docker_auth.yml

- name: Install module dependencies
  package:
    name: '{{ item }}'
    state: present
  become: true
  with_items: '{{ repository__role_dependencies }}'

- name: Pull Docker images
  docker_image:
    name: '{{ item }}'
  become: true
  with_items: '{{ repository__images }}'

- name: Stat nginx configuration
  stat:
    path: '{{ repository__config }}/nginx.conf'
  register: stat_nginx

- name: Stat registry configuration
  stat:
    path: '{{ repository__config }}/registry.yml'
  register: stat_registry

- name: Stat docker_auth configuration
  stat:
    path: '{{ repository__config }}/docker_auth.yml'
  register: stat_docker_auth

- name: Copy MetalK8s repository static Pod manifest
  template:
    dest: '{{ repository__kubelet_manifests }}/{{ item }}'
    mode: '0644'
    owner: root
    group: root
    src: 'etc/kubernetes/manifests/{{ item }}.j2'
  become: true
  with_items:
    - metalk8s-repository.manifest

- name: Wait for the repository to be up and running
  uri:
    url: '{{ item }}'
    validate_certs: false
    status_code: 200,401
  register: result
  retries: 60
  delay: 1
  until: result.status == 200 or result.status == 401
  when:
    - not ansible_check_mode
  with_items:
    - 'https://{{ repository__address }}/'
    - 'https://{{ repository__address }}/v2/'
    - 'https://{{ repository__address }}/auth'

- name: Create Docker CA certificate configuration directory
  file:
    path: '{{ item }}'
    mode: '0755'
    owner: root
    group: root
    state: directory
  become: true
  with_items:
    - '/etc/docker/certs.d'
    - '/etc/docker/certs.d/{{ repository__address }}'

- name: Copy CA certificate to Docker configuration directory
  copy:
    dest: '/etc/docker/certs.d/{{ repository__address }}/ca.crt'
    mode: '0644'
    owner: root
    group: root
    content: '{{ repository__ca_certificate }}'
  become: true

- name: Log in to Docker registry
  command: docker login -u '{{ repository__docker_creds_user }}' -p '{{ repository__docker_creds_password }}'
  become: true
  when: repository__docker_login
  no_log: true
